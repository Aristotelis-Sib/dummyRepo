# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  PR_NUMBER: ${{ github.event.pull_request.number }}
  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build:
    name: Required-test report
  # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Runs a single command using the runners shell
      - name: First 
        run: |
          echo build 
  
  # This workflow contains a single job called "build"
  deploy:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    needs: build  
    steps:
        - name: Checkout the running branch
          uses: actions/checkout@v2
        - name: Set up MATLAB
          uses: matlab-actions/setup-matlab@v1
        - name: Run Matlab Script
          run: matlab -softwareopengl -batch "testingPathControl()"
        - name: Echo escape test
          run: |
            echo "this is a '"quoted"' test"
            
        - name: Copy output to variable
          id: output_res
          run: |
            echo $(matlab -softwareopengl -batch "testingPathControl()") >> $GITHUB_OUTPUT
        - name: Echo Result
          run: |
            echo ${{steps.output_res.outputs.*}}
            echo ${{join(steps.output_res.outputs.*,'\n')}}
        - name: Copy output to variable second way
          id: output_res_v2
          run: |
            echo var=$(matlab -softwareopengl -batch "testingPathControl()") >> $GITHUB_OUTPUT
        - name: Echo Result v2
          run: |
            echo ${{steps.output_res_v2.outputs.var}}
